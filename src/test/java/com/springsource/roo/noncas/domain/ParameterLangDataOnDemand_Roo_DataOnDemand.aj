// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.roo.noncas.domain;

import com.springsource.roo.noncas.domain.ParameterLang;
import com.springsource.roo.noncas.domain.ParameterLangDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ParameterLangDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ParameterLangDataOnDemand: @Component;
    
    private Random ParameterLangDataOnDemand.rnd = new SecureRandom();
    
    private List<ParameterLang> ParameterLangDataOnDemand.data;
    
    public ParameterLang ParameterLangDataOnDemand.getNewTransientParameterLang(int index) {
        ParameterLang obj = new ParameterLang();
        setCode(obj, index);
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setEngDesc(obj, index);
        setLDesc(obj, index);
        setLocalDesc(obj, index);
        setParamType(obj, index);
        setStatus(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void ParameterLangDataOnDemand.setCode(ParameterLang obj, int index) {
        String code = "code_" + index;
        obj.setCode(code);
    }
    
    public void ParameterLangDataOnDemand.setCreatedBy(ParameterLang obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void ParameterLangDataOnDemand.setCreatedDate(ParameterLang obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void ParameterLangDataOnDemand.setEngDesc(ParameterLang obj, int index) {
        String engDesc = "engDesc_" + index;
        obj.setEngDesc(engDesc);
    }
    
    public void ParameterLangDataOnDemand.setLDesc(ParameterLang obj, int index) {
        String lDesc = "lDesc_" + index;
        obj.setLDesc(lDesc);
    }
    
    public void ParameterLangDataOnDemand.setLocalDesc(ParameterLang obj, int index) {
        String localDesc = "localDesc_" + index;
        obj.setLocalDesc(localDesc);
    }
    
    public void ParameterLangDataOnDemand.setParamType(ParameterLang obj, int index) {
        String paramType = "paramType_" + index;
        obj.setParamType(paramType);
    }
    
    public void ParameterLangDataOnDemand.setStatus(ParameterLang obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void ParameterLangDataOnDemand.setUpdatedBy(ParameterLang obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void ParameterLangDataOnDemand.setUpdatedDate(ParameterLang obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public ParameterLang ParameterLangDataOnDemand.getSpecificParameterLang(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ParameterLang obj = data.get(index);
        Long id = obj.getId();
        return ParameterLang.findParameterLang(id);
    }
    
    public ParameterLang ParameterLangDataOnDemand.getRandomParameterLang() {
        init();
        ParameterLang obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ParameterLang.findParameterLang(id);
    }
    
    public boolean ParameterLangDataOnDemand.modifyParameterLang(ParameterLang obj) {
        return false;
    }
    
    public void ParameterLangDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ParameterLang.findParameterLangEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ParameterLang' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ParameterLang>();
        for (int i = 0; i < 10; i++) {
            ParameterLang obj = getNewTransientParameterLang(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
